@using Framework.Web.HtmlHelpers
@using LogR.Common.Constants
@model Framework.Infrastructure.Models.Result.ReturnListWithSearchModel<LogR.Common.Models.Logs.AppLog, LogR.Common.Models.Search.AppLogSearchCriteria>

<!-- Full Width Column -->
<div class="content-wrapper">
    <div class="container-fluid">
        <!-- Content Header (Page header) -->
        <section class="content-header">
            <h1>
                App Logs
            </h1>
            <ol class="breadcrumb">
                <li><a href="#"><i class="fa fa-dashboard"></i> Home</a></li>
                <li class="active">App Logs</li>
            </ol>
        </section>

        <!----------Breadcrumb------------>
        <section class="bg row">
            <div class="row filter-section" >

                @Html.Partial("_NewMessage", @Model)
                <form id="frmFilter" action="/app-logs" method="get" onkeypress="return submitForm(event)">
                    <div class="col-md-7">

                        <div id="search_box_container"></div>
                        <div id="search_query"></div>

                    </div>
                    <div class="col-md-3  form-group">
                        <input id="sortby" name="sortby" value="@Model.Search.SortBy" class="form-control" type="hidden">
                        <input id="sortascending" name="sortascending" value="@Model.Search.SortAscending" class="form-control" type="hidden">
                        <input id="pageSize" name="pageSize" value="@Model.Search.PageSize" class="form-control" type="hidden">
                        <div class="input-group pull-right">
                            <input value="Filter Results" class="btn btn-primary " type="submit">&nbsp;
                            <input id="reset" value="Reset" class="btn btn-default " type="reset">&nbsp;
                            <input id="saveFilter" value="Save Filter" class="btn btn-success " type="button">
                        </div>

                    </div>
                    <div class="col-md-2 form-group">
                        <select id="js-example-data-array" name="select" class="js-example-data-array form-control">
                            <option value="" selected disabled> Select Search</option>
                        </select>
                      
                    </div>
                </form>
            </div>
        </section>

        <!-- Main content -->
        <section class="content">

            <div class="row">

                <div class="col-md-12">
                    <div class="box">
                        <!-- /.box-header -->
                        <div class="box-body">


                            
                            <table class="table table-striped table-hover" id="appLogTable">
                                <thead>
                                    <tr>
                                        <th scope="col" style="width:20px" class="action-cell">
                                            <input class="sr-only" type="checkbox" id="selectIDAll">
                                            
                                        </th>

                                        <th style="width:90px" class="Longdate">@Html.Partial("_SmartLink", Model.Search, new ViewDataDictionary(ViewData) { { "ColumnName", "Longdate" }, { "DisplayName", "Date" } })</th>
                                        <th style="width:75px"  class="Severity">@Html.Partial("_SmartLink", Model.Search, new ViewDataDictionary(ViewData) { { "ColumnName", "Severity" }, { "DisplayName", "Severity" } })</thstyle="width:100px">
                                        <th style="width:50px"  class="MachineName">@Html.Partial("_SmartLink", Model.Search, new ViewDataDictionary(ViewData) { { "ColumnName", "MachineName" }, { "DisplayName", "MachineName" } })</thstyle="width:50px">
                                        <th style="width:50px"  class="App">@Html.Partial("_SmartLink", Model.Search, new ViewDataDictionary(ViewData) { { "ColumnName", "App" }, { "DisplayName", "App" } })</thstyle="width:50px">
                                        <th style="width:50px"  class="Module">@Html.Partial("_SmartLink", Model.Search, new ViewDataDictionary(ViewData) { { "ColumnName", "Module" }, { "DisplayName", "Module" } })</thstyle="width:50px">
                                        <th style="width:50px"  class="RemoteAddress">@Html.Partial("_SmartLink", Model.Search, new ViewDataDictionary(ViewData) { { "ColumnName", "RemoteAddress" }, { "DisplayName", "Ip" } })</th>
                                        <th class="Msg">
                                            Message <div class="btn-group pull-right">
                                             
                                                   <a  href="#" data-toggle="dropdown"> <span class='fa fa-tasks dropdown-toggle ' ></span></a>
                                             
                                                <ul class="dropdown-menu stay-open" role="menu" style="padding:4px;" id="grpChkBox">

                                                    <li><input type="checkbox" name="Severity" /> Severity</li>
                                                    <li><input type="checkbox" name="MachineName" /> Machine Name</li>
                                                    <li><input type="checkbox" name="App" /> App</li>
                                                    <li><input type="checkbox" name="Module" /> Module</li>
                                                    <li><input type="checkbox" name="RemoteAddress" /> Ip</li>
                                                    <li><input type="checkbox"  name="userCheckbox" value="UserIdentity" /> User Name</li>
                                                    <li><input type="checkbox" name="timeCheckbox" value="time" /> Time</li>
                                                    <li><input type="checkbox" name="timeCheckbox" value="process" /> Process</li>
                                                    <li><input type="checkbox" name="timeCheckbox" value="thread" /> Thread</li>
                                                    <li><input type="checkbox" name="timeCheckbox" value="function" /> Function</li>

                                                </ul>
                                            </div>
                                        </th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var Current in Model.Model)
                                    {
                                        <tr>
                                            <td class="action-cell"><input id="selectID" name="selectID" type="checkbox" value="@Current.LogId" data-json='{"IngestJobId": "@Current.LogId"}' /></td>
                                            <td>@Current.Longdate.ToLocalTime()</td>
                                            <td><span class="label @Html.Partial("_logtypeclass",Current.Severity)">@Current.Severity</span></td>
                                            <td>@Current.MachineName</td>
                                            <td>@Current.App</td>
                                            <td>@Current.Module</td>
                                            <td>@Current.RemoteAddress <br><span class="label label-success UserIdentity "> @Current.UserIdentity </span></td>
                                            <td><div class="comment">@Current.Message</div>
                                            
                                                <div class="row">
                                                    <div class="col-xs-2 time">
                                                        <small class="stats-label">Time</small><br />
                                                        <span class="label label-info"> @Current.ElapsedTime </span>
                                                    </div>

                                                    <div class="col-xs-2 process">
                                                        <small class="stats-label">Process</small><br />
                                                        <span class="label label-success"> @Current.ProcessId </span>
                                                    </div>
                                                    <div class="col-xs-2 thread">
                                                        <small class="stats-label">Thread</small><br />
                                                        <span class="label label-danger"> @Current.ThreadId </span>
                                                    </div>
                                                    <div class="col-xs-2 function">
                                                        <small class="stats-label">Function</small><br />
                                                        <span class="label label-warning"> @Current.CurrentFunction </span>
                                                    </div>
                                                    <div class="col-xs-2">
                                                    </div>
                                        
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        <!-- /.box-body -->
                        <div class="box-footer clearfix">
                            @Html.Partial("_Pager", Model.Search)
                        </div>
                    </div>
                    <!-- /.box -->
                </div>

            </div><!-- /.row -->

        </section><!-- /.content -->
    </div><!-- /.container -->
    <div class="control-sidebar-bg" style="position: fixed; height: auto;"></div>
</div><!-- /.content-wrapper -->


<script type="text/javascript">

    ///////////////////////SelectAll///////////////////////
    var setCustomActionStatus = function (status) {
        $('#custom-action-btn').prop('disabled', status);
        var _isDisable = true;
        if (status) {
            $('input[name=selectID]').each(function () {
                if (this.checked) {
                    _isDisable = false;
                    return;
                }
            });
            if (_isDisable) {
                $("#custom-action-btn").attr("disabled", 'disabled');
                $("#custom-action-btn").removeClass('btn-blue').addClass('btn-black');
            }
        }
        else {
            $('#custom-action-btn').attr('disabled', false);
            $("#custom-action-btn").removeClass('btn-black').addClass('btn-blue');
        }
    };

    $("#selectIDAll").on("change", function () {
        var status = $(this).is(':checked');
        $('#custom-action-btn .dropdown-toggle').prop('disabled', !status);
        $('input[name=selectID]').each(function () {
            this.checked = status;
        });
        setCustomActionStatus(!status);
    });
    $("input[name=selectID]").on("change", function () {
        var status = $(this).is(":checked");
        setCustomActionStatus(!status);
    });
    ///////////////////////SelectAll///////////////////////

    $(document).ready(function () {
        var FromDate = $('#FromDate').datetimepicker({
            format: "mm/dd/yyyy",
        }).on('changeDate', function (ev) {
            FromDate.hide();
        }).data('datetimepicker');
        var ToDate = $('#ToDate').datetimepicker({
            format: "mm/dd/yyyy"
        }).on('changeDate', function (ev) {
            ToDate.hide();
        }).data('datetimepicker');

        $('input[name=selectID]').each(function () {
            this.checked = false;
        });
        $('input[name=selectIDAll]').each(function () {
            this.checked = false;
        });
        //
        $('#selectIDAll').prop("checked", false);
        setCustomActionStatus(true);
    });
</script>

<script type="text/javascript" charset="utf-8">

    doSearch = function (url,key, searchterm, res) {
                console.log('key get value', key);
                $.getJSON(url, function (data) {
                    if (data.isSuccess) {
                        console.log('data', data);
                        $data = data;
                        res(data.model);
                    } else {
                        console.log('error - fail',data);
                    }
                });
    };

            $(function () {
                window.visualSearch = new VisualSearch({
                    el: $('#search_box_container'),
                    placeholder: "Search",
                    strict: false,	//Strict Parameters, strict values?
                    search: function (json) {
                        var searchJson = jQuery.parseJSON(json);
                        $("div#search_query").empty();
                        console.log('search params', searchJson);
                        for (var item = 0; item < searchJson.length; item++) {

                            var keyItem = $("< input type= 'hidden' />");
                            keyItem.name = "SearchTerms[" + item + "].Key";
                            keyItem.val(searchJson[item].key);
                            $('<input>').attr({
                                type: 'hidden',
                                name: keyItem.name
                            }).val(searchJson[item].key).appendTo($("div#search_query"));



                            var valueItem = $("< input type= 'hidden' />");
                            valueItem.name = "SearchTerms[" + item + "].Value";
                            valueItem.val(searchJson[item].value);
                            $('<input>').attr({
                                type: 'hidden',
                                name: valueItem.name
                            }).val(searchJson[item].value).appendTo($("div#search_query"));

                            var operatorItem = $("< input type= 'hidden' />");
                            operatorItem.name = "SearchTerms[" + item + "].Operator";
                            operatorItem.val(searchJson[item].operator);
                            $('<input>').attr({
                                type: 'hidden',
                                name: operatorItem.name
                            }).val(searchJson[item].operator).appendTo($("div#search_query"));

                        }

                    },

                    parameters: [
                        {
                            key: "@SearchFieldContants.AppLogs.Date",
                            category: "Date Range",
                            placeholder: "Date",
                            type: "date",
                            min: 1,
                            max: 10
                        },
                        {
                            key: "@SearchFieldContants.AppLogs.LogLevel",
                            placeholder: "Log Level",
                            operators: [
							    "@SearchFieldContants.Operators.Is",
                                "@SearchFieldContants.Operators.IsNot",
                                "@SearchFieldContants.Operators.Contains",
                                "@SearchFieldContants.Operators.NotContains",
                                "@SearchFieldContants.Operators.StartsWith",
                                "@SearchFieldContants.Operators.EndsWith"
						    ],
                            getValues: function (key, searchterm, res) {
                                doSearch("@Url.Action("LogLevels", "LogExplorer")?keyword=" + searchterm,key, searchterm, res);
                            }
                        },
                        {
                            key: "@SearchFieldContants.AppLogs.Machine",
                            placeholder: "Machine",
                            operators: [
                                "@SearchFieldContants.Operators.Is",
                                "@SearchFieldContants.Operators.IsNot",
                                "@SearchFieldContants.Operators.Contains",
                                "@SearchFieldContants.Operators.NotContains",
                                "@SearchFieldContants.Operators.StartsWith",
                                "@SearchFieldContants.Operators.EndsWith"
                            ],
                            getValues: function (key, searchterm, res) {
                                doSearch("@Url.Action("MachineNames", "LogExplorer")?keyword=" + searchterm,key, searchterm, res);
                            },
                        },
                        {
                            key: "@SearchFieldContants.AppLogs.App",
                            getValues: function (key, searchterm, res) {
                                doSearch("@Url.Action("AppNames", "LogExplorer")?keyword=" + searchterm,key, searchterm, res);
                            },
                            operators: [
                                "@SearchFieldContants.Operators.Is",
                                "@SearchFieldContants.Operators.IsNot",
                                "@SearchFieldContants.Operators.Contains",
                                "@SearchFieldContants.Operators.NotContains",
                                "@SearchFieldContants.Operators.StartsWith",
                                "@SearchFieldContants.Operators.EndsWith"
                            ],
                            placeholder: "App"
                        },
                        {
                            key: "@SearchFieldContants.AppLogs.Ip",
                            operators: [
                                "@SearchFieldContants.Operators.Is",
                                "@SearchFieldContants.Operators.IsNot",
                                "@SearchFieldContants.Operators.Contains",
                                "@SearchFieldContants.Operators.NotContains",
                                "@SearchFieldContants.Operators.StartsWith",
                                "@SearchFieldContants.Operators.EndsWith"
                            ],
                            placeholder: "IP Address",
                            getValues: function (key, searchterm, res) {
                                doSearch("@Url.Action("Ips", "LogExplorer")?keyword=" + searchterm,key, searchterm, res);
                            },
                        },
                        {
                            key: "@SearchFieldContants.AppLogs.Username",
                            operators: [
                                "@SearchFieldContants.Operators.Is",
                                "@SearchFieldContants.Operators.IsNot",
                                "@SearchFieldContants.Operators.Contains",
                                "@SearchFieldContants.Operators.NotContains",
                                "@SearchFieldContants.Operators.StartsWith",
                                "@SearchFieldContants.Operators.EndsWith"
                            ],
                            placeholder: "User Name",
                            getValues: function (key, searchterm, res) {
                                doSearch("@Url.Action("UserNames", "LogExplorer")?keyword=" + searchterm,key, searchterm, res);
                            },
                        },
                        {
                            key: "@SearchFieldContants.AppLogs.ElapsedTime",
                            operators: [
                                "@SearchFieldContants.Operators.Is",
                                "@SearchFieldContants.Operators.IsNot",
                                "@SearchFieldContants.Operators.Contains",
                                "@SearchFieldContants.Operators.NotContains",
                                "@SearchFieldContants.Operators.StartsWith",
                                "@SearchFieldContants.Operators.EndsWith"
                            ],
                            placeholder: "Elapsed Time",
                            values: ['Time-1', 'Time-2']
                        },
                        {
                            key: "@SearchFieldContants.AppLogs.ThreadId",
                            operators: [
                                "@SearchFieldContants.Operators.EqualTo",
                                "@SearchFieldContants.Operators.NotEqualTo",
                                "@SearchFieldContants.Operators.GreaterThan",
                                "@SearchFieldContants.Operators.LessThan"
                            ],
                            placeholder: "Thread Id",
                            getValues: function (key, searchterm, res) {
                                doSearch("@Url.Action("ThreadIds", "LogExplorer")?keyword=" + searchterm,key, searchterm, res);
                            },
                        },
                        {
                            key: "@SearchFieldContants.AppLogs.ProcessId",
                            operators: [
                                "@SearchFieldContants.Operators.EqualTo",
                                "@SearchFieldContants.Operators.NotEqualTo",
                                "@SearchFieldContants.Operators.GreaterThan",
                                "@SearchFieldContants.Operators.LessThan"
                            ],
                            placeholder: "Process Id",
                            getValues: function (key, searchterm, res) {
                                doSearch("@Url.Action("ProcessIds", "LogExplorer")?keyword=" + searchterm,key, searchterm, res);
                            },
                        },
                        {
                            key: "@SearchFieldContants.AppLogs.FileName",
                            operators: [
                                "@SearchFieldContants.Operators.Is",
                                "@SearchFieldContants.Operators.IsNot",
                                "@SearchFieldContants.Operators.Contains",
                                "@SearchFieldContants.Operators.NotContains",
                                "@SearchFieldContants.Operators.StartsWith",
                                "@SearchFieldContants.Operators.EndsWith"
                            ],
                            placeholder: "File Name",
                            getValues: function (key, searchterm, res) {
                                doSearch("@Url.Action("FileNames", "LogExplorer")?keyword=" + searchterm,key, searchterm, res);
                            }
                        },
                        {
                            key: "@SearchFieldContants.AppLogs.FunctionName",
                            operators: [
                                "@SearchFieldContants.Operators.Is",
                                "@SearchFieldContants.Operators.IsNot",
                                "@SearchFieldContants.Operators.Contains",
                                "@SearchFieldContants.Operators.NotContains",
                                "@SearchFieldContants.Operators.StartsWith",
                                "@SearchFieldContants.Operators.EndsWith"
                            ],
                            placeholder: "Function Name",
                            getValues: function (key, searchterm, res) {
                                doSearch("@Url.Action("Functions", "LogExplorer")?keyword=" + searchterm,key, searchterm, res);
                            }
                        }
                    ],
                    defaultquery: [
                    ]

            });
        });
</script>

<script type="text/javascript">
        $(document).ready(function () {

            $(".comment").shorten();

        });
</script>
<script>
        $(function () {
            var $chk = $("#grpChkBox input:checkbox");
            var $tbl = $("#appLogTable");
            var $tblhead = $("#appLogTable th");

            $chk.prop('checked', true);

            $chk.click(function () {
                var colToHide = $tblhead.filter("." + $(this).attr("name"));
                var index = $(colToHide).index();
                $tbl.find('tr :nth-child(' + (index + 1) + ')').toggle();
            });
        });
</script>
<script type="text/javascript">
        $(document).ready(function () {
            $('input[type="checkbox"]').click(function () {
                var inputValue = $(this).attr("value");
                $("." + inputValue).toggle();
            });
        });
</script>

<script>
        // Code goes here

        $('.js-data-example-ajax').select2({
            ajax: {
                url: 'https://api.github.com/search/repositories',
                dataType: 'json'
                // Additional AJAX parameters go here; see the end of this chapter for the full code of this example
            }
        });

        var data = [
            {
                id: 0,
                text: 'enhancement'
            },
            {
                id: 1,
                text: 'bug'
            },
            {
                id: 2,
                text: 'duplicate'
            },
            {
                id: 3,
                text: 'invalid'
            },
            {
                id: 4,
                text: 'wontfix'
            }
        ];
        $(".js-example-data-array").select2({
            data: data
        })


</script>